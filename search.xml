<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell&amp;bash</title>
      <link href="/2024/12/17/%E5%AD%A6%E4%B9%A0/linux/2024-12-17shell/"/>
      <url>/2024/12/17/%E5%AD%A6%E4%B9%A0/linux/2024-12-17shell/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分-bash简介"><a class="markdownIt-Anchor" href="#第一部分-bash简介"></a> 第一部分 bash简介</h1><p>在介绍bash之前，需要先了解它的起源——shell。</p><p>shell俗称壳，它是指UNIX系统下的一个命令解析器；主要用于用户和系统的交互。</p><p>UNIX系统上有很多种Shell。首个shell，即Bourne Shell，于1978年在V7(AT&amp;T的第7版)UNIX上推出。后来，又演变出C shell、bash等不同版本的shell。</p><p>bash，全称为Bourne-Again Shell。它是一个为GNU项目编写的Unix shell。bash脚本功能非常强大，尤其是在处理自动循环或大的任务方面可节省大量的时间。bash是许多Linux平台的内定Shell，这也是我们介绍它主要的原因。</p><h1 id="第二部分-bash基础"><a class="markdownIt-Anchor" href="#第二部分-bash基础"></a> 第二部分 bash基础</h1><h2 id="变量使用"><a class="markdownIt-Anchor" href="#变量使用"></a> 变量使用</h2><p><strong>1 基础</strong></p><p>命令：变量=值。</p><p>等号两边不能有空格！如果值有空格，需要用<code>&quot;&quot;</code>或<code>''</code>引用起来。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line">b = <span class="string">&quot;10&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> c = 3 <span class="comment"># 只读变量，不能被修改</span></span><br></pre></td></tr></table></figure><p><strong>2 引用变量</strong></p><p>命令：<code>$变量名</code>。</p><p>以下三种引用变量的方式等价。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;a&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;a&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># 10</span></span><br></pre></td></tr></table></figure><p><strong>3 删除变量</strong> 命令：<code>unset 变量名</code>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># !/bin/bash</span></span><br><span class="line"></span><br><span class="line">a = 10</span><br><span class="line"><span class="built_in">unset</span> a</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="comment"># 输出(无输出)</span></span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure><p>因为中间删除了变量，所以不会输出任何内容。</p><p><strong>4 从键盘读取变量</strong></p><p>命令：<code>read 变量</code>。</p><p>允许从键盘输入变量的值，实现交互。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> a</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="comment"># a的值</span></span><br></pre></td></tr></table></figure><h2 id="变量类型"><a class="markdownIt-Anchor" href="#变量类型"></a> 变量类型</h2><p><strong>1 系统环境变量</strong></p><p>系统预定义的变量，一般在<code>/etc/profile</code> 中进行定义。使用<code>env</code>查看所有系统变量。<code>HOME</code> ：用户主目录 <code>PATH</code> 文件搜索路径。PWD ：用户当前工作目录。<code>PS1</code>、<code>PS2</code> ：提示符。<code>LOGNAME</code>：指登录主机的用户名称；<code>HOSTNAME</code> ：主机名字，也就是这个系统的名字。<code>USER</code>：指目前环境使用者的名称。等等…还有其他的系统变量。</p><p>使用：<code>export 变量名</code>，把 变量变为全局变量。变为全局变量后，就可以在多个文件里使用该变量。</p><p>但是在命令行，使用export声明为全局变量后，只对当前的命令窗口有效。如果要想始终有效可以直接将环境变量添加到bashrc中去。使用vi ~/.bashrc编辑，添加进入后，使用source ~/.bashrc刷新来使得文件生效。</p><p><strong>2 重<strong><strong>定向</strong></strong>符</strong></p><h1 id="table"><a class="markdownIt-Anchor" href="#table"></a> table</h1><table><thead><tr><th>类别</th><th>操作符</th><th>说明</th></tr></thead><tbody><tr><td>输入重定向</td><td>&gt;</td><td>输入重定向是将命令中接收输入的途径由默认的键盘更改（重定向）为指定的文件</td></tr><tr><td>输出重定向</td><td>&gt;&gt; or &lt;</td><td>输出重定向是将命令中输出的内容由默认的屏幕更改（重定向）为指定的文件</td></tr></tbody></table><p>使用重定向符时，文件不存在则自动创建文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> hello &gt; 1.c <span class="comment">#将 hello 输入到 1.c文件里</span></span><br><span class="line"><span class="built_in">cat</span> &lt; 1.c &gt; 2.c <span class="comment">#从1.c文件里获取内容，输出到2.c文件里</span></span><br><span class="line"><span class="built_in">cat</span> 2.c <span class="comment">#查看2文件里的内容</span></span><br></pre></td></tr></table></figure><p><strong>3 管道</strong></p><p>管道操作符|用于连接左右两个命令，将|左边的命令执行结果（输出）作为|右边命令的输入。</p><h1 id="第三部分-bash示例和书写流程"><a class="markdownIt-Anchor" href="#第三部分-bash示例和书写流程"></a> 第三部分 bash示例和书写流程</h1><p><strong>1 <a href="http://xn--test-p85fh26fopklja.sh">新建文件test.sh</a></strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">touch</span> test.sh</span><br></pre></td></tr></table></figure><p><strong>2 添加可执行权限</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">chmod</span> +x test.sh</span><br></pre></td></tr></table></figure><p><strong>3 编辑test.sh，test.sh内容如下：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello bash&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>说明：</p><p>(01) #!/bin/bash : 它是bash文件声明语句，表示是以/bin/bash程序执行该文件。它必须写在文件的第一行！</p><p>(02) echo “hello bash” : 表示在终端输出“hello bash”</p><p>(03) exit 0 : 表示返回0。在bash中，0表示执行成功，其他表示失败。</p><p><strong>4 执行bash脚本</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./test.sh</span><br></pre></td></tr></table></figure><p>在终端输出“bash hello”</p><h1 id="第四部分-bash基础语法"><a class="markdownIt-Anchor" href="#第四部分-bash基础语法"></a> 第四部分 bash基础语法</h1><h2 id="1-条件判断"><a class="markdownIt-Anchor" href="#1-条件判断"></a> 1. 条件判断</h2><p>条件判断有2中格式，分别是“test EXPRESSION”和“[ EXPRESSION ]”。</p><p>“test”判断语句，在实际中应用的比较少；相反的，“[]”判断语句应用很广。下面分别对它们进行介绍</p><h3 id="11-test判断语句"><a class="markdownIt-Anchor" href="#11-test判断语句"></a> 1.1 test判断语句</h3><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">test</span> EXPRESSION</span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>test是关键字，表示判断；</p><p>EXPRESSION是被判断的语句。</p><p><strong>应用实例</strong></p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>test -d File</td><td>判断File是不是&quot;目录&quot;</td></tr><tr><td>test -f File</td><td>判断File是不是&quot;普通文件&quot;</td></tr><tr><td>test -L File</td><td>判断File是不是&quot;符号链接&quot;</td></tr><tr><td>test -r File</td><td>判断File是不是&quot;可读&quot;</td></tr><tr><td>test -s File</td><td>判断File是不是&quot;文件长度大于0、非空&quot;</td></tr><tr><td>test -w File</td><td>判断File是不是&quot;可写&quot;</td></tr><tr><td>test -u File</td><td>判断File是不是&quot;有suid位设置&quot;</td></tr><tr><td>test -x File</td><td>判断File是不是&quot;可执行&quot;</td></tr></tbody></table><h3 id="12-条件判断"><a class="markdownIt-Anchor" href="#12-条件判断"></a> 1.2 []条件判断</h3><p><strong>基本格式</strong></p><p>[ EXPRESSION ]</p><p><strong>格式说明</strong></p><p>中括号的左右扩弧和EXPRESSION之间都必须有<strong>空格</strong>！</p><p><strong>应用实例</strong></p><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>[ (expr) ]</td><td>expr为真</td></tr><tr><td>[ !expr ]</td><td>expr为假</td></tr><tr><td>[ expr1 -a expr2 ]</td><td>expr1和expr2同时为真</td></tr><tr><td>[ expr1 -o expr2 ]</td><td>expr1或expr2为真</td></tr><tr><td>[ -n string ]</td><td>string的长度不为0</td></tr><tr><td>[ -z string ]</td><td>string的长度为0</td></tr><tr><td>[ string1 = string2 ]</td><td>两个字符串string1和string2相等</td></tr><tr><td>[ string1 != string2 ]</td><td>两个字符串string1和string2不等</td></tr><tr><td>[ integer1 -eq integer2 ]</td><td>两个integer1和integer2整数相等</td></tr><tr><td>[ integer1 -ne integer2 ]</td><td>integer1不等于integer2</td></tr><tr><td>[ integer1 -ge integer2 ]</td><td>integer1大于或等于integer2</td></tr><tr><td>[ integer1 -gt integer2 ]</td><td>integer1大于integer2</td></tr><tr><td>[ integer1 -le integer2 ]</td><td>integer1小于或等于integer2</td></tr><tr><td>[ integer1 -lt integer2 ]</td><td>integer1小于integer2</td></tr><tr><td>[ file1 -ef file2 ]</td><td>文件file1和file2有相同的device和inode数目</td></tr><tr><td>[ file1 -nt file2 ]</td><td>file1的修改事件早于file2</td></tr><tr><td>[ file1 -ot file2 ]</td><td>file1的修改事件晚于file2</td></tr><tr><td>[ -b file ]</td><td>file是块设备</td></tr><tr><td>[ -c file ]</td><td>file是字符设备</td></tr><tr><td>[ -d file ]</td><td>file是文件夹</td></tr><tr><td>[ -e file ]</td><td>file是存在</td></tr><tr><td>[ -f file ]</td><td>file是普通文件</td></tr><tr><td>[ -g file ]</td><td>file存在，且有group-ID</td></tr><tr><td>[ -G file ]</td><td>file存在，且group-ID是有效的</td></tr><tr><td>[ -h file ]</td><td>file存在，且是一个硬链接</td></tr><tr><td>[ -L file ]</td><td>file存在，且是一个软链接</td></tr><tr><td>[ -r file ]</td><td>file存在，且可读</td></tr><tr><td>[ -w file ]</td><td>file存在，且可写</td></tr><tr><td>[ -x file ]</td><td>file存在，且可执行</td></tr></tbody></table><p>例如，</p><p>一、判断文件/home/skywang/123.txt是否存在</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ -f /home/skywang/123.txt ]</span><br></pre></td></tr></table></figure><p>二、判断变量val是否等于字符串“skywang”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ <span class="string">&quot;<span class="variable">$val</span>&quot;</span> = <span class="string">&quot;skywang&quot;</span> ]</span><br></pre></td></tr></table></figure><p>三，判断变量num是否等于数字100</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -eq <span class="string">&quot;100&quot;</span> ]</span><br></pre></td></tr></table></figure><h3 id="13-测试逻辑表达式"><a class="markdownIt-Anchor" href="#13-测试逻辑表达式"></a> 1.3 测试逻辑表达式</h3><p><strong>基本格式</strong></p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>-a</td><td>逻辑与,操作符两边均为真,结果为真,否则为假。</td></tr><tr><td>-o</td><td>逻辑或,操作符两边一边为真,结果为真,否则为假。</td></tr><tr><td>!</td><td>逻辑否,条件为假,结果为真。</td></tr></tbody></table><p><strong>应用实例</strong></p><p>一、判断文件123.txt是不是可读写</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ -r 123.txt -a -w 123.txt ]</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ -r 123.txt ] &amp;&amp; [ -w 123.txt ]</span><br></pre></td></tr></table></figure><p>二、判断变量num是不是等于数字101或102</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -eq <span class="string">&quot;101&quot;</span> -o <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -eq <span class="string">&quot;102&quot;</span> ]</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [[ <span class="variable">$num</span> -eq 101 || <span class="variable">$num</span> -eq 102 ]]</span><br><span class="line"><span class="comment"># 这里使用 [[ ]] 结构来进行条件判断，|| 表示逻辑或的关系，和原来使用 -o 在功能上是类似的，不过 [[ ]] 结构在语法等方面更加灵活、功能更丰富一些。</span></span><br></pre></td></tr></table></figure><p>三、判断文件123.txt是不是不可读</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ [ ! -r 123.txt ]</span><br></pre></td></tr></table></figure><h2 id="2-if-then-else语句"><a class="markdownIt-Anchor" href="#2-if-then-else语句"></a> 2. if then else语句</h2><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件1</span><br><span class="line"><span class="keyword">then</span> 命令1</span><br><span class="line"><span class="keyword">elif</span> 条件2</span><br><span class="line"><span class="keyword">then</span> 命令2</span><br><span class="line"><span class="keyword">else</span> 命令3</span><br><span class="line"><span class="keyword">if</span></span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>if 语句必须以单词 fi 终止。</p><p>elif 和 else 为可选项,如果语句中没有否则部分,那么就不需要 elif 和 else 部分。</p><p>if 语句可以有许多 elif 部分。最常用的 if 语句是 if then fi 结构。</p><p><strong>应用实例</strong></p><p>一、判断文件文件123.txt是否存在，存在则输出“file exist”；没有则输出“file not exist”。bash文件内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f 123.txt ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;file exist&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;file not exist&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>二、提示用户输入值。若输入的值小于0，则输出“negtive number”；若等于0,则输出“number zero”，否则，输出“positive number”。bash文件内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># 提示用户输入一个值</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;please input a number:&quot;</span></span><br><span class="line"><span class="comment"># 保存用户输入的值到num中</span></span><br><span class="line"><span class="built_in">read</span> num </span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -lt <span class="string">&quot;0&quot;</span> ];<span class="keyword">then</span> </span><br><span class="line"><span class="comment"># 小于0,则输出“negtive number” </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;negtive number&quot;</span> </span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$num</span>&quot;</span> -gt <span class="string">&quot;0&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="comment"># 大于0,则输出“positive number”</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;positive number&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 大于0,则输出&quot;number zero&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;number zero&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="3-case语句"><a class="markdownIt-Anchor" href="#3-case语句"></a> 3. case语句</h2><p>case语句为多选择语句。可以用case语句匹配一个值与一个模式,如果匹配成功,执行相匹配的命令。</p><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> 值 <span class="keyword">in</span></span><br><span class="line">模式1&#125;</span><br><span class="line">命令1</span><br><span class="line">...</span><br><span class="line">;;</span><br><span class="line">模式2)</span><br><span class="line">命令2</span><br><span class="line">...</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span> <span class="comment"># 结束case语句</span></span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>“模式”部分可能包括元字符，即:</p><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>任意字符。</td></tr><tr><td>?</td><td>任意单字符。</td></tr><tr><td>\[\.\.\]</td><td>类或范围中任意字符</td></tr></tbody></table><p><strong>应用实例</strong></p><p>一、提示用户输入Y/y或N/n。若输入Y/y，则输出“yes”；若输入N/n,则输出“no”；否则，“incorrect input”。bash文件内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示用户输入一个值</span></span><br><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;are you femail(Y/N):&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存用户输入的值到val中</span></span><br><span class="line"><span class="built_in">read</span> val</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$val</span> <span class="keyword">in</span></span><br><span class="line">Y|y) </span><br><span class="line"><span class="comment"># 用户输入Y或y </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;yes&quot;</span></span><br><span class="line">;;</span><br><span class="line">N|n)</span><br><span class="line"><span class="comment"># 用户输入N或n</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;no&quot;</span></span><br><span class="line">;; </span><br><span class="line">*)</span><br><span class="line"><span class="comment"># 其它输入</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;incorrect input&quot;</span></span><br><span class="line">;; </span><br><span class="line"><span class="keyword">esac</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="4-for循环"><a class="markdownIt-Anchor" href="#4-for循环"></a> 4. for循环</h2><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名<span class="keyword">in</span>列表</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令1</span><br><span class="line">命令2...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>当变量值在列表里, for循环即执行一次所有命令,使用变量名访问列表中取值。</p><p>命令可为任何有效的 shell命令和语句。变量名为任何单词。 in列表用法是可选的,如果不用它, for循环使用命令行的位置参数。</p><p><strong>应用实例</strong></p><p>一、输入当前文件夹的一级子目录中文件名字。bash脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将ls的结果保存到变量CUR_DIR中</span></span><br><span class="line">CUR_DIR=`<span class="built_in">ls</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示ls的结果</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$CUR_DIR</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> <span class="variable">$CUR_DIR</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 若val是文件，则输出该文件名</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$val</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;FILE: <span class="variable">$val</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>二、输出1-10之间数字的总和。bash脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>=0</span><br><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>;i&lt;<span class="number">10</span>;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">((sum=<span class="variable">$sum</span>+<span class="variable">$i</span>))</span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;sum=<span class="variable">$sum</span>&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="5-until循环"><a class="markdownIt-Anchor" href="#5-until循环"></a> 5. until循环</h2><p>until循环执行一系列命令直至条件为真时停止。</p><p>until循环与 while循环在处理方式上刚好相反。一般 while循环优于until循环,但在某些时候 — 也只是极少数情况下, until循环更加有用。</p><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">until</span> 条件</span><br><span class="line">命令1</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>条件可为任意测试条件,测试发生在循环末尾,因此循环至少执行一次 — 请注意这一点。</p><p><strong>应用实例</strong></p><p>一、从0开始逐步递增，当数值等于5时，停止递增。Bash脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起始值为0</span></span><br><span class="line">val=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">until</span> [ <span class="string">&quot;<span class="variable">$val</span>&quot;</span> -eq <span class="string">&quot;5&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 输出数值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"><span class="comment"># 将数值加1</span></span><br><span class="line">((val++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="6-while循环"><a class="markdownIt-Anchor" href="#6-while循环"></a> 6. while循环</h2><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> 命令</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">命令1</span><br><span class="line">命令2</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><strong>应用实例</strong></p><p>从0开始逐步递增，当数值等于5时，停止递增。Bash脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起始值为0</span></span><br><span class="line">val=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$val</span>&quot;</span> -lt <span class="string">&quot;5&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="comment"># 输出数值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"><span class="comment"># 将数值加1</span></span><br><span class="line">((val++))</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h2 id="7-使用break和continue控制循环"><a class="markdownIt-Anchor" href="#7-使用break和continue控制循环"></a> 7. 使用break和continue控制循环</h2><p><strong>基本格式</strong></p><p>break命令允许跳出循环。</p><p>continue命令类似于 break命令,只有一点重要差别,它不会跳出循环,只是跳过这个循环步。</p><p><strong>应用实例</strong></p><p>一、<code>break</code>应用从0开始逐步递增，当数值等于5时，停止递增。Bash脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起始值为0</span></span><br><span class="line">val=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$val</span>&quot;</span> -eq <span class="string">&quot;5&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="comment"># 如果val=5，则跳出循环</span></span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 输出数值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"><span class="comment"># 将数值加1</span></span><br><span class="line">((val++))</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p>二、continue应用从0开始逐步递增到10：当数值为5时，将数值递增2；否则，输出数值。Bash脚本内容如下：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起始值为0</span></span><br><span class="line">val=0</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="string">&quot;<span class="variable">$val</span>&quot;</span> -le <span class="string">&quot;10&quot;</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$val</span>&quot;</span> -eq <span class="string">&quot;5&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="comment"># 如果val=5，则将数值加2</span></span><br><span class="line">((val=<span class="variable">$val</span>+<span class="number">2</span>))</span><br><span class="line"><span class="built_in">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment"># 输出数值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"><span class="comment"># 将数值加1</span></span><br><span class="line">((val++))</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="第五部分-bash数组"><a class="markdownIt-Anchor" href="#第五部分-bash数组"></a> 第五部分 bash数组</h1><h2 id="1-数组定义"><a class="markdownIt-Anchor" href="#1-数组定义"></a> 1. 数组定义</h2><p><strong>方法一</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array=(10 20 30 40 50)</span><br></pre></td></tr></table></figure><p>一对括号表示是数组，数组元素用“空格”符号分割开。引用数组时从序号0开始。</p><p><strong>方法二</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">array[0]=10</span><br><span class="line">array[1]=20</span><br><span class="line">array[2]=30</span><br><span class="line">array[3]=40</span><br><span class="line">array[4]=50</span><br></pre></td></tr></table></figure><p><strong>方法三</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var=<span class="string">&quot;10 20 30 40 50&quot;</span>; array=(<span class="variable">$var</span>)</span><br></pre></td></tr></table></figure><h2 id="2-数组操作"><a class="markdownIt-Anchor" href="#2-数组操作"></a> 2. 数组操作</h2><p>(01) 显示数组中第2项</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[i]&#125;</span></span><br><span class="line"><span class="comment"># 说明：数组是从序号0开始计算(即第1项为array[0])。</span></span><br></pre></td></tr></table></figure><p>(02) 显示数组中的所有元素</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[@]&#125;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[*]&#125;</span></span><br></pre></td></tr></table></figure><p>(03) 显示数组长度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#array[@]&#125;</span></span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#array[*]&#125;</span></span><br></pre></td></tr></table></figure><p>(04) 删除数组第2项元素</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> array[1]</span><br></pre></td></tr></table></figure><p>说明：unset仅仅只清除array[1]的值，并没有将array[1]删除掉</p><p>(05) 删除整个数组</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">unset</span> array</span><br></pre></td></tr></table></figure><p>(06) 输出数组的第1-3项</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;array[@]:0:3&#125;</span></span><br><span class="line"><span class="comment"># 说明：参考“\$&#123;数组名[@或*]:起始位置:长度&#125;”</span></span><br></pre></td></tr></table></figure><p>(07) 将数组中的0替换成1</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;a[@]/0/1&#125;</span></span><br><span class="line"><span class="comment"># 说明：\$&#123;数组名[@或*]/查找字符/替换字符</span></span><br></pre></td></tr></table></figure><h1 id="第六部分-函数"><a class="markdownIt-Anchor" href="#第六部分-函数"></a> 第六部分 函数</h1><h2 id="1-函数定义"><a class="markdownIt-Anchor" href="#1-函数定义"></a> 1. 函数定义</h2><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>function可有可无。但建议保留，因为保留的话看起来更加直观。</p><p><strong>应用实例</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 定义局部变量i</span></span><br><span class="line">    <span class="built_in">local</span> i=0 </span><br><span class="line">    <span class="comment"># 定义局部变量total=传入foo的参数总数</span></span><br><span class="line">    <span class="built_in">local</span> total=<span class="variable">$#</span></span><br><span class="line">    <span class="comment"># 输出参数总数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;total param =<span class="variable">$total</span>&quot;</span></span><br><span class="line">    <span class="comment"># 输出传入foo的每一个参数</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">        ((i++))</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> -- val=<span class="variable">$val</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回参数总数</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$total</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-函数调用和传参"><a class="markdownIt-Anchor" href="#2-函数调用和传参"></a> 2. 函数调用和传参</h2><p><strong>调用方法</strong></p><p>直接通过函数名去调用。</p><p><strong>应用实例</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">foo param1 param2 param3</span><br></pre></td></tr></table></figure><p>说明：调用函数foo，并传入param1 param2 param3三个参数</p><h2 id="3-函数返回值"><a class="markdownIt-Anchor" href="#3-函数返回值"></a> 3. 函数返回值</h2><p><strong>使用方法</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">return</span> 返回值</span><br></pre></td></tr></table></figure><p><strong>方法说明</strong></p><p>例如，foo param1 param2 param3之后，再调用$?就是上次调用的返回值</p><h2 id="4-应用实例"><a class="markdownIt-Anchor" href="#4-应用实例"></a> 4. 应用实例</h2><p>编辑一个函数foo：打印foo的输入参数的总数，并输入每个参数和参数对应的序号。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 定义局部变量i</span></span><br><span class="line">    <span class="built_in">local</span> i=0 </span><br><span class="line">    <span class="comment"># 定义局部变量total=传入foo的参数总数</span></span><br><span class="line">    <span class="built_in">local</span> total=<span class="variable">$#</span></span><br><span class="line">    <span class="comment"># 输出参数总数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;total param =<span class="variable">$total</span>&quot;</span></span><br><span class="line">    <span class="comment"># 输出传入foo的每一个参数</span></span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> <span class="variable">$@</span></span><br><span class="line">    <span class="keyword">do</span>  </span><br><span class="line">        ((i++))</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span> -- val=<span class="variable">$val</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回参数总数</span></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$total</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo</span><br><span class="line">foo param1 param2 param3</span><br><span class="line"><span class="comment"># 输出foo param1 param2 param3的返回值</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;return value=$?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="第七部分-数值运算"><a class="markdownIt-Anchor" href="#第七部分-数值运算"></a> 第七部分 数值运算</h1><p>数值比较请参考&quot;第三部分&quot;的1.2节，本部分只介绍数值运算。</p><p>常用的4种数值运算说明</p><p>数值元算主要有4种实现方式：<strong>(())、let、expr、bc</strong>。</p><p><strong>工作效率</strong>：(()) == let &gt; expr &gt; bc</p><p>(01), (())和let是bash内建命令，执行效率高；而expr和bc是系统命令，会消耗内存，执行效率低。</p><p>(02), (())、let和expr只支持整数运算，不支持浮点运算；而bc支持浮点运算。</p><p>下面分别介绍这4种实现方式的使用方法。</p><p><em><em>应用实例一：分别用上面四种方式实现&quot;3</em>(5+2)&quot;。</em>*</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值i=3*(5+2) (方法一:$(())实现)</span></span><br><span class="line">val=$((<span class="number">3</span>*(<span class="number">5</span>+<span class="number">2</span>)))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值i=3*(5+2) (方法二:let实现)</span></span><br><span class="line"><span class="built_in">let</span> <span class="string">&quot;val=3*(5+2)&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值i=3*(5+2) (方法三:expr实现)</span></span><br><span class="line">val=`<span class="built_in">expr</span> 3 \* \( 5 + 2 \)`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值i=3*(5+2) (方法四:bc实现)</span></span><br><span class="line">val=`<span class="built_in">echo</span> <span class="string">&quot;3*(5+2)&quot;</span>|bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><strong>应用实例二：分别勇上面四种方式实现“数值+1”。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=0</span><br><span class="line"><span class="comment"># 数值加1 (方法一)</span></span><br><span class="line">((val++))</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=0</span><br><span class="line"><span class="comment"># 数值加1 (方法二)</span></span><br><span class="line"><span class="built_in">let</span> val++</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=0</span><br><span class="line"><span class="comment"># 数值加1 (方法三)</span></span><br><span class="line">val=`<span class="built_in">expr</span> <span class="variable">$val</span> + 1`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line">val=0</span><br><span class="line"><span class="comment"># 数值加1(方法四)</span></span><br><span class="line">val=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$val</span>+1&quot;</span>|bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><p><strong>应用实例三：计算1/3,保留3位小数。</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值i=3*(5+2) (方法四:bc实现)</span></span><br><span class="line">val=`<span class="built_in">echo</span> <span class="string">&quot;scale=3; 1/3&quot;</span>|bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;val=<span class="variable">$val</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure><h1 id="第八部分-字符运算"><a class="markdownIt-Anchor" href="#第八部分-字符运算"></a> 第八部分 字符运算</h1><h2 id="1-字符串定义"><a class="markdownIt-Anchor" href="#1-字符串定义"></a> 1. 字符串定义</h2><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>${var}</td><td>变量var的值, 与$var相同</td></tr><tr><td>${var-DEFAULT}</td><td>如果var没有被声明, 那么就以$DEFAULT作为其值</td></tr><tr><td>${var:-DEFAULT}</td><td>如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值</td></tr><tr><td>${var=DEFAULT}</td><td>如果var没有被声明, 那么就以$DEFAULT作为其值</td></tr><tr><td>${var:=DEFAULT}</td><td>如果var没有被声明, 或者其值为空, 那么就以$DEFAULT作为其值</td></tr><tr><td>${var+OTHER}</td><td>如果var声明了, 那么其值就是$OTHER, 否则就为null字符串</td></tr><tr><td>${var:+OTHER}</td><td>如果var被设置了, 那么其值就是$OTHER, 否则就为null字符串</td></tr><tr><td>${var?ERR_MSG}</td><td>如果var没被声明, 那么就打印$ERR_MSG</td></tr><tr><td>${var:?ERR_MSG}</td><td>如果var没被设置, 那么就打印$ERR_MSG</td></tr><tr><td>${!varprefix*}</td><td>匹配之前所有以varprefix开头进行声明的变量</td></tr><tr><td>${!varprefix@}</td><td>匹配之前所有以varprefix开头进行声明的变量</td></tr></tbody></table><h2 id="2-字符串操作"><a class="markdownIt-Anchor" href="#2-字符串操作"></a> 2. 字符串操作</h2><h3 id="21-string操作公式表"><a class="markdownIt-Anchor" href="#21-string操作公式表"></a> 2.1 string操作公式表</h3><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>${1#string}</td><td>$string的长度</td></tr><tr><td>${string:position}</td><td>在$string中, 从位置$position开始提取子串</td></tr><tr><td>${string:position:length}</td><td>在$string中, 从位置$position开始提取长度为$length的子串</td></tr><tr><td>${string#substring}</td><td>从变量$string的开头, 删除最短匹配$substring的子串</td></tr><tr><td>${string##substring}</td><td>从变量$string的开头, 删除最长匹配$substring的子串</td></tr><tr><td>${string%substring}</td><td>从变量$string的结尾, 删除最短匹配$substring的子串</td></tr><tr><td>${string%%substring}</td><td>从变量$string的结尾, 删除最长匹配$substring的子串</td></tr><tr><td>${string/substring/replacement}</td><td>使用$replacement, 来代替第一个匹配的$substring</td></tr><tr><td>${string//substring/replacement}</td><td>使用$replacement, 代替所有匹配的$substring</td></tr><tr><td>${string/#substring/replacement}</td><td>如果$string的前缀匹配$substring, 那么就用$replacement来代替匹配到的$substring</td></tr><tr><td>${string/%substring/replacement}</td><td>如果$string的后缀匹配$substring, 那么就用$replacement来代替匹配到的$substring</td></tr></tbody></table><h3 id="22-应用实例"><a class="markdownIt-Anchor" href="#22-应用实例"></a> 2.2 应用实例</h3><p>首先，我们定义个str字符串变量，然后再对此变量进行字符串操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ str=<span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure><p>(01) 显示字符串长度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;#str&#125;</span></span><br></pre></td></tr></table></figure><p>(02) 提取world</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:6&#125;</span></span><br></pre></td></tr></table></figure><p>(03) 提取or</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str:7:2&#125;</span></span><br></pre></td></tr></table></figure><p>(04) 删除hello</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str#hello&#125;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str#*lo&#125;</span></span><br></pre></td></tr></table></figure><p>(05) 删除world</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str%world&#125;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str%wo*&#125;</span></span><br></pre></td></tr></table></figure><p>(06) 将所有的字符“l”替换为“m”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$&#123;str//l/m&#125;</span></span><br></pre></td></tr></table></figure><h1 id="第九部分-bash自带参数"><a class="markdownIt-Anchor" href="#第九部分-bash自带参数"></a> 第九部分 bash自带参数</h1><table><thead><tr><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>$?</td><td>上次指令或程序的执行结果。如果执行成功则为0，否则为非0</td></tr><tr><td>$#</td><td>参数个数</td></tr><tr><td>$@</td><td>代表全部变量，例如，“$1” “$2” “$3” “$4”，每个变量是独立的，且用双引号括起来</td></tr><tr><td>$*</td><td>代表全部变量，例如，$1 $2 $3 $4</td></tr><tr><td>$-</td><td>在shell启动或使用set命令时提供选项</td></tr><tr><td>$$</td><td>当前shell的进程号</td></tr><tr><td>$0</td><td>当前shell进程名</td></tr><tr><td>$n</td><td>n表示数字。例如，$1表示第1个参数，$2表示第2个参数</td></tr></tbody></table><h1 id="第十部分-bash调试"><a class="markdownIt-Anchor" href="#第十部分-bash调试"></a> 第十部分 bash调试</h1><h2 id="1-bash命令调试"><a class="markdownIt-Anchor" href="#1-bash命令调试"></a> 1. bash命令调试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash [-nvx] scripts.sh</span><br></pre></td></tr></table></figure><p>选项与参数:</p><p>-n :不要执行 script,仅查询语法的问题;</p><p>-v :再执行 sccript 前,先将 scripts 的内容输出到屏幕上;</p><p>-x :将使用到的 script 内容显示到屏幕上,这是很有用的参数!</p><p>例如，想要执行bash脚本，并查看bash的调用流程，可以通过以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash -x test.sh</span><br></pre></td></tr></table></figure><h2 id="2-echo调试"><a class="markdownIt-Anchor" href="#2-echo调试"></a> 2. echo调试</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> [OPTION] STRING</span><br></pre></td></tr></table></figure><p>说明：</p><p>-n : 输出内容之后，不换行。默认是输入内容之后，换行。</p><p>-e : 开启反斜线“\”转义功能</p><p>-E : 开启反斜线“\”转义功能（默认）。</p><p>例如，输出“please input a number:”之后不换行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> -n <span class="string">&quot;please input a number:&quot;</span></span><br></pre></td></tr></table></figure><h2 id="3-printf"><a class="markdownIt-Anchor" href="#3-printf"></a> 3. printf</h2><p>和echo一样，printf也能用于输出。语法格式和C语言中printf一样。</p><p>例如，输出“hello printf”之后换行。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">printf</span> <span class="string">&quot;hello printf\n&quot;</span></span><br></pre></td></tr></table></figure><h1 id="第十一部分-bash注释"><a class="markdownIt-Anchor" href="#第十一部分-bash注释"></a> 第十一部分 bash注释</h1><h2 id="1-单行注释"><a class="markdownIt-Anchor" href="#1-单行注释"></a> 1. 单行注释</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># echo &quot;single line&quot;</span></span><br></pre></td></tr></table></figure><p>说明：#放在文件开头，表示注释掉本行。</p><h2 id="2-多行注释"><a class="markdownIt-Anchor" href="#2-多行注释"></a> 2. 多行注释</h2><p>可以通过以下两种方法实现多行注释：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:||&#123;</span><br><span class="line">....被注释的多行内容</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">false</span> ; <span class="keyword">then</span></span><br><span class="line">....被注释的多行内容</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h1 id="第十二部分-bash内建指令"><a class="markdownIt-Anchor" href="#第十二部分-bash内建指令"></a> 第十二部分 bash内建指令</h1><h2 id="1-内建命令查看方法"><a class="markdownIt-Anchor" href="#1-内建命令查看方法"></a> 1. 内建命令查看方法</h2><p><strong>基本格式</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">type</span> cmd</span><br></pre></td></tr></table></figure><p><strong>格式说明</strong></p><p>type是命令关键字，cmd表示查看的命令；若输出builtin，则该命令是bash的内建命令。</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">type</span> <span class="built_in">echo</span></span><br></pre></td></tr></table></figure><p>除此之外，用户也可以通过man bash或者man builtins查看bash的全部内置命令.</p><h2 id="2-常用内建命令说明"><a class="markdownIt-Anchor" href="#2-常用内建命令说明"></a> 2. 常用内建命令说明</h2><table><thead><tr><th>指令</th><th>使用示例</th><th>说明</th></tr></thead><tbody><tr><td>echo</td><td>echo arg</td><td>在屏幕上显示出由arg指定的字串</td></tr><tr><td>read</td><td>read变量名表</td><td>从标准输入设备读入一行，分解成若干字，赋值给bash程序内部定义的变量</td></tr><tr><td>shift</td><td>shift [N]  (N为大于0的整数；当N省略时，等价与于“shift 1”)</td><td>所有的参数依次向左移动N个位置，并使用$#减少N，直到$#=0为止。</td></tr><tr><td>alias</td><td>alias name=‘value’</td><td>别名。用name替换value，value要用单引号括住。</td></tr><tr><td>export</td><td>export变量名[=变量值]</td><td>export可以把bash的变量向下带入子bash(即子bash中可以使用父bash的变量)，从而让子进程继承父进程中的环境变量。但子bash不能用export把它的变量向上带入父bash。</td></tr><tr><td>readonly</td><td>readonly 变量名</td><td>定义只读变量。不带任何参数的readonly命令将显示出所有只读变量。</td></tr><tr><td>exec</td><td>exec 命令参数</td><td>当bash执行到exec语句时，不会去创建新的子进程，而是转去执行指定的命令，当指定的命令执行完时，该进程（也就是最初的bash）就终止了，所以bash程序中exec后面的语句将不再被执行。</td></tr><tr><td>“.”(点)</td><td>bash程序文件名</td><td>使bash读入指定的bash程序文件并依次执行文件中的所有语句。</td></tr><tr><td>exit</td><td>exit N</td><td>退出Shell程序。在exit之后可有选择地指定一个数位作为返回状态。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>syzkaller01-配置</title>
      <link href="/2024/12/11/%E5%B0%8F%E7%B1%B3/syzkaller/syzkaller01-%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/12/11/%E5%B0%8F%E7%B1%B3/syzkaller/syzkaller01-%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一-syzkaller工作原理"><a class="markdownIt-Anchor" href="#一-syzkaller工作原理"></a> 一、Syzkaller工作原理</h1><h2 id="11-简介"><a class="markdownIt-Anchor" href="#11-简介"></a> 1.1 简介</h2><p>syzkaller是一个无监督的用覆盖率做引导的内核模糊测试工具，以<strong>系统调用</strong>为基础进行设计。由google安全人员研发并一直改进更新。syzkaller系统的结构如下图所示，其中绿色部分运行在host上，黄色部分运行在VM或android机器上</p><p>syz-manager负责启动、监控、重启VM实例，并在VM中启动syz-fuzzer进程。syz-manager负责持久化存储负责语料库和crash记录。syz-manager运行在基于稳定kernel的host上。</p><p>syz-fuzzer进程运行在kernel不稳定的VM上。syz-fuzzer负责引导整个fuzzing过程（包括生成输入、修改输入、最小化程序等操作）并通过RPC将触发新覆盖度信息的输入发送给syz-manager。syz-fuzzer同时也负责启动syz-executor</p><p>每个syz-executor负责处理一个输入（一个输入包括一个syscalls序列），接受并执行从syz-fuzzer获取的程序并将执行结果返回给syz-fuzzer</p><p>syzkaller 有很多个部件，其中：</p><ul><li>syz-extract：用于解析 syzlang 中的常量</li><li>syz-sysgen：用于解析 syzlang，提取其中描述的 syscall 和参数类型，以及参数依赖关系</li><li>syz-manager：用于启动与管理 syzkaller</li><li>syz-fuzzer：实际在 VM 中运行的 fuzzer</li><li>syz-executor：实际在 VM 中运行的测试程序</li></ul><p>通过kcov收集覆盖率信息，若产生<strong>新的覆盖</strong>，则认为当前的case为<strong>有效</strong>case，此时syzkaller对case参数进行变异寻找系统漏洞。</p><h2 id="12-syscall-描述语言syzlang"><a class="markdownIt-Anchor" href="#12-syscall-描述语言syzlang"></a> 1.2. syscall 描述语言（syzlang）</h2><p>syzkaller使用它自己的声明式语言来描述系统调用模板，docs目录下的syscall_descriptions.md中可以找到相关的说明。这些系统调用模板被翻译成syzkaller使用的代码需要经过两个步骤。第一步是使用<strong>syz-extract</strong>从linux源代码中提取符号常量的值，结果被存储在.const文件中，例如/sys/linux/tty.txt被转换为sys/linux/tty_amd64.const。第二步是根据系统调用模板和第一步中生成的const文件使用<strong>syz-sysgen</strong>生成syzkaller用的go代码。可以在/sys/linux/gen/amd64.go和/executor/syscalls.h中看到结果。最后，重新编译生成带有相应规则的syzkaller二进制可执行文件。</p><p>syzkaller/sys/linux目录下的sys.txt中有通用的调用形式可以参考</p><p>syzlang语法见<a href="https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions_syntax.md">https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions_syntax.md</a></p><h2 id="13-crash"><a class="markdownIt-Anchor" href="#13-crash"></a> 1.3. crash</h2><p>当发生crash时，syzkaller会将crash信息保存在<code>$workdir/crashes</code>中，一种crash类型会对应一个子文件夹，并保存相应的report、log文件</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/1280X1280.PNG" alt="1280X1280" /></p><p>一旦syzkaller在某个VM中检测到kernel crash，它将自动启动重现此crash的进程（除非你在配置中指定了&quot;reproduce&quot;: false）。默认情况下，它将使用4个虚拟机来复现crash，然后最小化导致crash的程序。可能会停止模糊测试，因为所有的VM可能都忙于复现检测到的崩溃。</p><p>复现一个崩溃的过程可能需要几分钟到一个小时不等，这取决于崩溃是否内核本身是一个比较封闭的系统，因此不太可能由fuzz工具自己探测到问题，不过内核自己可以在运行的同时检查自己是否有问题出现容易复现或根本无法复现。由于这个过程并不完美，有一种方法可以尝试手动重现崩溃，见<a href="https://github.com/google/syzkaller/blob/master/docs/reproducing_crashes.md">https://github.com/google/syzkaller/blob/master/docs/reproducing_crashes.md</a></p><p>如果成功复现，它可以生成为两种形式之一：syzkaller程序或C程序。Syzkaller总是尝试生成更用户友好的C重程序，但有时因各种原因失败。如果syzkaller仅生成了一个syzkaller程序，有一种方法可以执行它们以手动复现和调试crash，见<a href="https://github.com/google/syzkaller/blob/master/docs/reproducing_crashes.md">https://github.com/google/syzkaller/blob/master/docs/reproducing_crashes.md</a></p><h1 id="二-在syzkaller中添加规则自定义测试用例"><a class="markdownIt-Anchor" href="#二-在syzkaller中添加规则自定义测试用例"></a> 二、在Syzkaller中添加规则（自定义测试用例）</h1><p>在syzkaller/sys/linux目录添加新的文件operate.txt</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include &lt;linux/fs.h&gt;</span><br><span class="line"></span><br><span class="line">open<span class="variable">$proc</span>(file ptr[<span class="keyword">in</span>, string[<span class="string">&quot;/proc/test&quot;</span>]], flags flags[proc_open_flags], mode flags[proc_open_mode]) fd</span><br><span class="line"><span class="built_in">read</span><span class="variable">$proc</span>(fd fd, buf buffer[out], count len[buf])</span><br><span class="line">write<span class="variable">$proc</span>(fd fd, buf buffer[<span class="keyword">in</span>], count len[buf])</span><br><span class="line">close<span class="variable">$proc</span>(fd fd)</span><br><span class="line"></span><br><span class="line">proc_open_flags = O_RDONLY, O_WRONLY, O_RDWR, O_APPEND, FASYNC, O_CLOEXEC, O_CREAT, O_DIRECT, O_DIRECTORY, O_EXCL, O_LARGEFILE, O_NOATIME, O_NOCTTY, O_NOFOLLOW, O_NONBLOCK, O_PATH, O_SYNC, O_TRUNC, __O_TMPFILE</span><br><span class="line">proc_open_mode = S_IRUSR, S_IWUSR, S_IXUSR, S_IRGRP, S_IWGRP, S_IXGRP, S_IROTH, S_IWOTH, S_IXOTH</span><br></pre></td></tr></table></figure><p>txt文件会被syz-extract转化成.const文件，并保存在与txt的相同目录下</p><p>语法如下：</p><ul><li>SyscallName$Type：SyscallName’$'‘位于符号之前，是系统调用的名称，即内核提供的接口。Type位于’$'符号之后，是系统调用的具体类型。在上面的例子中，open$proc代表着系统调用“open()”具有一个限制类型“proc”，名称由编写者确定，具体限制由后续参数确定</li><li>ArgumentName ArgumentType[Limit]：ArgumentName是参数的名称，而ArgumentType是其类型。在上面的例子中参数有几种类型，比如string、flags等。[Limit]将限制参数的值，如果没有具体指定，syzkaller将生成一个随机值。其中proc_open_flags和proc_open_mode都是限制的范围</li><li>返回值类型在最后，比如open$proc的返回值类型为fd</li></ul><p><strong>范例：</strong></p><ul><li>/dev/random字符设备<ul><li>random源码路径：linux/drivers/char/random.c</li><li>random描述文件：<a href="https://github.com/google/syzkaller/blob/master/sys/linux/dev_random.txt">https://github.com/google/syzkaller/blob/master/sys/linux/dev_random.txt</a></li></ul></li></ul><p><strong>使新规则生效</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> syzkaller</span><br><span class="line">make clean</span><br><span class="line">make bin/syz-extract</span><br><span class="line">./bin/syz-extract -os linux -<span class="built_in">arch</span> arm64 -sourcedir &lt;kernel_path&gt; sys/linux/operate.txt</span><br><span class="line">make generate</span><br><span class="line">make TARGETOS=linux TARGETARCH=arm64./out/target/product/aurora/prebuilt_kernel</span><br></pre></td></tr></table></figure><h1 id="三-环境搭建"><a class="markdownIt-Anchor" href="#三-环境搭建"></a> 三、环境搭建</h1><ul><li>配置go环境(需要go版本在1.20及以上)</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://dl.google.com/go/go1.21.4.linux-amd64.tar.gz</span><br><span class="line">tar -xf go1.21.4.linux-amd64.tar.gz</span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="comment"># 在~/.bashrc中加入以下两行</span></span><br><span class="line"><span class="built_in">export</span> GOROOT=`<span class="built_in">pwd</span>`/go</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$GOROOT</span>/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><ul><li>下载安装syzkaller</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/google/syzkaller</span><br><span class="line"><span class="built_in">cd</span> syzkaller</span><br><span class="line">make TARGETOS=linux TARGETARCH=arm64</span><br><span class="line"><span class="comment"># 如果报aarch64-linux-gnu-gcc is missing (exec: &quot;aarch64-linux-gnu-gcc&quot;: executable file not found in ATH)</span></span><br><span class="line"><span class="comment"># 执行以下命令</span></span><br><span class="line"><span class="built_in">sudo</span> apt install gcc-aarch64-linux-gnu</span><br><span class="line"><span class="comment"># 如果报aarch64-linux-gnu-gcc: error trying to exec &#x27;cc1plus&#x27;: execvp: No such file or directory </span></span><br><span class="line"><span class="comment"># 执行以下命令</span></span><br><span class="line"><span class="built_in">sudo</span> apt install g++-aarch64-linux-gnu</span><br></pre></td></tr></table></figure><p>可以在syzkaller/bin目录中得到以下二进制文件</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/c1e627e6-a543-45fc-be49-8a7a564ed0fb.png" alt="" /></p><h1 id="四-测试demo"><a class="markdownIt-Anchor" href="#四-测试demo"></a> 四、测试demo</h1><p>其中syzkaller config配置如下：</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/b5182ada-188f-48b8-8cad-e5e34c26c37b.png" alt="b5182ada-188f-48b8-8cad-e5e34c26c37b" /></p><ul><li><strong>http</strong>为syzkaller统计结果的前端展示界面ip:port</li><li><strong>devices</strong>对应的值为adb devices对应的设备ID，可以指定多个</li><li><strong>kernel_obj</strong>对应下载好的vmlinux路径</li><li><strong>enable_syscalls</strong>为mount 代表只测试mount（也可以用disable_syscalls表示不测某些syscall）</li><li><strong>disable_syscalls</strong>表示禁用某些syscall</li></ul><p>具体参数信息见<a href="https://github.com/google/syzkaller/blob/master/pkg/mgrconfig/config.go">https://github.com/google/syzkaller/blob/master/pkg/mgrconfig/config.go</a></p><p>执行syz-manager</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./bin/syz-manager --config=android.cfg</span><br></pre></td></tr></table></figure><p>会将sys-fuzzer和syz-executor push到Android机器中，并在Andorid环境下执行sys-fuzzer</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/b5182ada-188f-48b8-8cad-e5e34c26c37b.png" alt="b5182ada-188f-48b8-8cad-e5e34c26c37b" /></p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>其他flag：</p><ul><li>–debug 打印所有debug信息，开启此选项时只会运行一个VM实例</li></ul><p>首先会显示哪些syscall无法使能，比如mount<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><msub><mi>p</mi><mi>t</mi></msub><mi>c</mi><mi>p</mi><mtext>，显示</mtext><mi mathvariant="normal">‘</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>r</mi><mi>o</mi><mi>c</mi><mi mathvariant="normal">/</mi><mi>f</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>s</mi><mi>y</mi><mi>s</mi><mi>t</mi><mi>e</mi><mi>m</mi><mi>s</mi><mi>d</mi><mi>o</mi><mi>e</mi><mi>s</mi><mi>n</mi><mi>o</mi><mi>t</mi><mi>c</mi><mi>o</mi><mi>n</mi><mi>t</mi><mi>a</mi><mi>i</mi><mi>n</mi><mn>9</mn><mi>p</mi><mi mathvariant="normal">‘</mi><mo separator="true">,</mo><mtext>表示当前内核不支持</mtext><mn>9</mn><mi>p</mi><mtext>文件系统；另外还有可能需要其他前置条件，比如要先开启某些系统调用后，才可以使用，比如下图中的</mtext><mi>m</mi><mi>o</mi><mi>u</mi><mi>n</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">9p_tcp，显示`/proc/filesystems does not contain 9p`,表示当前内核不支持9p文件系统；另外还有可能需要其他前置条件，比如要先开启某些系统调用后，才可以使用，比如下图中的mount</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">9</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">c</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">显</span><span class="mord cjk_fallback">示</span><span class="mord">‘</span><span class="mord">/</span><span class="mord mathnormal">p</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">o</span><span class="mord mathnormal">c</span><span class="mord">/</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal">e</span><span class="mord mathnormal">m</span><span class="mord mathnormal">s</span><span class="mord mathnormal">d</span><span class="mord mathnormal">o</span><span class="mord mathnormal">e</span><span class="mord mathnormal">s</span><span class="mord mathnormal">n</span><span class="mord mathnormal">o</span><span class="mord mathnormal">t</span><span class="mord mathnormal">c</span><span class="mord mathnormal">o</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord">9</span><span class="mord mathnormal">p</span><span class="mord">‘</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">当</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">内</span><span class="mord cjk_fallback">核</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">支</span><span class="mord cjk_fallback">持</span><span class="mord">9</span><span class="mord mathnormal">p</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">统</span><span class="mord cjk_fallback">；</span><span class="mord cjk_fallback">另</span><span class="mord cjk_fallback">外</span><span class="mord cjk_fallback">还</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">能</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">他</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">置</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">先</span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">启</span><span class="mord cjk_fallback">某</span><span class="mord cjk_fallback">些</span><span class="mord cjk_fallback">系</span><span class="mord cjk_fallback">统</span><span class="mord cjk_fallback">调</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">才</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">比</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">图</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">的</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">u</span><span class="mord mathnormal">n</span><span class="mord mathnormal">t</span></span></span></span>tmpfs，需要先使能fstat、geteuid、getresuid…等syscall之后才能使能</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>之后会显示具体的信息：</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/5c763695-ba27-455d-9996-6e628899a49c.png" alt="5c763695-ba27-455d-9996-6e628899a49c" /></p><p>打开浏览器查看测试结果</p><p>ip为config中的http,即为android.cfg中的&quot;http&quot;:“127.0.0.1:56741” （默认值，可配置）</p><p>在浏览器中输入<a href="http://127.0.0.1:56741/">http://127.0.0.1:56741/</a></p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>其中选中的syscall数量为2，input数量为1，即每个syscall有一个测试序列</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>coverage信息</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>crash信息会存放在<code>$work_dir/crashed</code>中</p><p>在config文件中删除enable_syscalls（使能所有syscall用例），重新测试。</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>每个syscall占一行：</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>Corpus表现当前语料库中保存的有效用例</p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><p>查看生成的测试用例syscall序列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openat$binderfs的测试用例</span><br><span class="line">r0 = openat$binderfs(0xffffffffffffff9c, &amp;(0x7f00000000c0)=&#x27;./binderfs/binder0\x00&#x27;, 0x0, 0x0)</span><br><span class="line">ioctl$BINDER_SET_CONTEXT_MGR_EXT(r0, 0x4018620d, &amp;(0x7f0000000080)=&#123;0x73622a85, 0x100&#125;)</span><br><span class="line">mmap$binder(&amp;(0x7f00000a0000)=nil, 0x2000, 0x1, 0x11, r0, 0x0)</span><br><span class="line">r1 = openat$binderfs(0xffffffffffffff9c, &amp;(0x7f00000000c0)=&#x27;./binderfs/binder1\x00&#x27;, 0x0, 0x0)</span><br><span class="line">mmap$binder(&amp;(0x7f00000c0000)=nil, 0x2000, 0x1, 0x11, r1, 0x0)</span><br><span class="line">ioctl$BINDER_WRITE_READ(r1, 0xc0306201, &amp;(0x7f0000000100)=&#123;0x4c, 0x0, &amp;(0x7f0000000140)=[@transaction_sg=&#123;0x40486311, &#123;0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x58, 0x18, &amp;(0x7f00000001c0)=&#123;@flat, @fd=&#123;0x66642a85, 0x0, r0&#125;, @ptr=&#123;0x70742a85, 0x0, &amp;(0x7f0000000240)=&quot;&quot;/10, 0xa&#125;&#125;, &amp;(0x7f0000000280)=&#123;0x0, 0x18, 0x30&#125;&#125;, 0x10&#125;], 0x0, 0x0, &amp;(0x7f00000002c0)&#125;)</span><br><span class="line"></span><br><span class="line">openat$urandom的测试用例</span><br><span class="line">mmap(&amp;(0x7f0000000000/0x2000)=nil, 0x2000, 0x3, 0x32, 0xffffffffffffffff, 0x0)</span><br><span class="line">r0 = openat$urandom(0xffffffffffffff9c, &amp;(0x7f0000000040), 0x0, 0x0)</span><br><span class="line">read(r0, &amp;(0x7f0000000000), 0x2000)</span><br><span class="line">close(r0)</span><br><span class="line">r1 = openat(0xffffffffffffff9c, &amp;(0x7f0000000080)=&#x27;./file1\x00&#x27;, 0x105042, 0x1ff)</span><br><span class="line">read(r1, &amp;(0x7f0000000000), 0x2000)</span><br><span class="line">close(r1)</span><br><span class="line">munmap(&amp;(0x7f0000000000/0x2000)=nil, 0x2000)</span><br><span class="line"></span><br><span class="line">socket$inet_udp的测试用例</span><br><span class="line">r0 = socket$inet_udp(0x2, 0x2, 0x0)</span><br><span class="line">bind$inet(r0, &amp;(0x7f0000000040)=&#123;0x2, 0x4e20, @empty&#125;, 0x10)</span><br><span class="line">r1 = socket$inet_udp(0x2, 0x2, 0x0)</span><br><span class="line">sendto$inet(r1, &amp;(0x7f0000000080)=&#x27;\x00&#x27;/10, 0xa, 0x0, &amp;(0x7f00000000c0)=&#123;0x2, 0x4e20, @empty&#125;, 0x10)</span><br><span class="line">recvfrom(r0, &amp;(0x7f0000000100)=&quot;&quot;/10, 0xa, 0x0, 0x0, 0x0)</span><br><span class="line"></span><br><span class="line">close的测试用例</span><br><span class="line"></span><br><span class="line">r0 = socket$inet_icmp(0x2, 0x2, 0x1)</span><br><span class="line">close(r0)</span><br></pre></td></tr></table></figure><p>由上面的结果可以得到结论，对于待测的syscall，syzkaller会根据函数调用规则（比如根据返回值、参数类型）构建有上下关联的syscall序列</p><p><strong>总结</strong></p><ol><li>Kernel开启KCOV和KASAN的必要性</li></ol><p><code>KCOV</code>用于收集内核代码执行时的覆盖率信息。syzkaller基于代码覆盖率进行用例生成，主要体现在以下两方面：</p><ul><li>执行每次生成的用例，如果覆盖率发生变化，则证明该用例是有效的,会记录在语料库中</li><li>覆盖率可以进一步引导syzkaller生成新的用例</li></ul><p>开启<code>KASan</code>能显著提高模糊测试发现内存相关错误的能力，从而捕捉到那些可能导致系统崩溃、数据损坏或安全漏洞的内存操作错误。KASan如果不开启，就只能等到内核panic才能知道出现了问题，发现问题的范围就会减小，同时分析难度大大增加。</p><ol><li>系统调用的覆盖以及用例集的随机性</li></ol><p>在配置文件中可以指定要测试的syscall，对于指定的syscall，syzkaller产生的用例集取决于syscall对应的描述语言，如果某个syscall的参数不依赖于其他的syscall返回值，那么产生的测试用例syscall序列和参数都是随机；如果当前syscall的参数依赖于其他的syscall返回值（比如read依赖于open），那么syzkaller会按照依赖顺序产生测试用例（参数随机）（假如A依赖于B的返回值，那么在生成的序列中A一定在B后面，中间可能会有其他syscall）</p><p>如果没有指定syscall（即使能所有syscall），syzkaller首先会判断当前系统支持的syscall，之后针对每个syscall的处理方式同上。</p><ol><li>syzkaller的使用需要对kernel的编译和系统调用有一定了解<ol><li>使用<code>syzkaller</code>，推荐的内核配置参数不仅仅只有KCOV和KASan，其余flag见<strong>附录</strong>。需要对每个配置参数有一定的了解</li><li>编写syzlang需要对系统调用接口和kernel源码有一定的了解</li></ol></li></ol><h1 id="五-测试流程"><a class="markdownIt-Anchor" href="#五-测试流程"></a> 五、测试流程</h1><ol><li>找kernel的研发同学打一个带有KCOV和KASAN的包（userroot或userdebug），vendor侧需要勾选Symbols</li><li>按照“三、环境搭建”中的流程安装go和syzkaller</li><li>准备3-4台机器（电量需要在30%以上），刷1中打好的包，并下载vmlinux（见第四节的2）</li><li>在syzkaller目录下添加配置文件android.cfg，具体内容如下：</li></ol><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;target&quot;</span>: <span class="string">&quot;linux/arm64&quot;</span>,   <span class="comment">// 不用改</span></span><br><span class="line">        <span class="string">&quot;http&quot;</span>: <span class="string">&quot;127.0.0.1:56741&quot;</span>,  <span class="comment">// 可以改成局域网ip，这样在整个局域网的所有用户都可以看见</span></span><br><span class="line">                                    <span class="comment">// 即ifconfig命令下 10.xx.xx.xx对应的ip地址</span></span><br><span class="line">        <span class="string">&quot;workdir&quot;</span>: <span class="string">&quot;workdir&quot;</span>, <span class="comment">// 指定crash信息的存储路径，不用改</span></span><br><span class="line">        <span class="string">&quot;kernel_obj&quot;</span>: <span class="string">&quot;./prebuilt_kernel&quot;</span>, <span class="comment">// vmlinux、源码等存储目录</span></span><br><span class="line">        <span class="string">&quot;syzkaller&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 不用改</span></span><br><span class="line">        <span class="string">&quot;cover&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不用改</span></span><br><span class="line">        <span class="string">&quot;reproduce&quot;</span>: <span class="literal">false</span>, <span class="comment">// 当出现crash时，是否需要复现，如果为了发现是否有bug，可以置为false</span></span><br><span class="line">                            <span class="comment">// 置为true的话，当发现crash时，后续多数机器会用于复现该crash</span></span><br><span class="line">                            <span class="comment">// 会减缓测试效率</span></span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;adb&quot;</span>,  <span class="comment">// 不用改</span></span><br><span class="line">        <span class="string">&quot;vm&quot;</span>: &#123;  </span><br><span class="line">                <span class="string">&quot;devices&quot;</span>: [<span class="string">&quot;5e366360&quot;</span>,<span class="string">&quot;6ad55d2d&quot;</span>,<span class="string">&quot;ea3105ab&quot;</span>], <span class="comment">// adb devices命令对应的序列号</span></span><br><span class="line">                                                               <span class="comment">// 每台机器对应一个</span></span><br><span class="line">                <span class="string">&quot;battery_check&quot;</span>: <span class="literal">true</span>  <span class="comment">// 不用改</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在syzkaller目录下创建prebuilt_kernel目录（如果没有的话），之后将3中下载好的vmlinux放到prebuilt_kernel目录下（如果需要在前端页面查看coverage信息，还需要将kernel源码放到该目录下）</li><li>进入到syzkaller目录下，执行 <code>./bin/syz-manager --config=android.cfg</code>命令，之后在浏览器中输入android.cfg文件中http对应的信息即可查看结果</li></ol><p><strong>总结</strong></p><p>由于syzkaller是无监督的用覆盖率做引导的内核模糊测试工具，在产生测试用例时会随机构造函数参数和调用序列，每次测试的结果（比如产生的测试用例、代码覆盖情况）可能会不同。</p><p>在测试过程中，测试的前期产生的有效测试用例个数(即页面中的corpus)增长很快，同时代码的覆盖情况也是增长很快。随着测试的进行，有效测试用例个数和代码覆盖情况变化情况会趋于平缓（此时是因为syzkaller随机产生的测试用例并不会产生新的覆盖，也就不会判定为是一个有效的用例）</p><p>syzkaller每测试一组系统调用case后，就会重启手机。</p><p>目前暂定一轮的测试时间是24h，测试机器台数为4台，后续需要根据具体的测试结果再进行调整。</p><h1 id="六-相关问题"><a class="markdownIt-Anchor" href="#六-相关问题"></a> 六、相关问题</h1><p><img src="http://qjl988-tuchuang.oss-cn-beijing.aliyuncs.com/img/asynccode" alt="img" /></p><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><ul><li>Android环境测试搭建 <a href="https://github.com/google/syzkaller/blob/master/docs/linux/setup_linux-host_android-device_arm-kernel.md">https://github.com/google/syzkaller/blob/master/docs/linux/setup_linux-host_android-device_arm-kernel.md</a></li><li>Kernel flag配置<a href="https://github.com/xairy/syzkaller/blob/master/docs/linux/kernel_configs.md">syzkaller/docs/linux/kernel_configs.md at master · xairy/syzkaller</a></li><li>android.cfg（–config指定的配置文件）说明：<ul><li>例子：<a href="https://github.com/google/syzkaller/blob/master/pkg/mgrconfig/testdata/qemu.cfg">syzkaller/pkg/mgrconfig/testdata/qemu.cfg at master · google/syzkaller</a></li><li>参数说明：<a href="https://github.com/google/syzkaller/blob/master/pkg/mgrconfig/config.go">https://github.com/google/syzkaller/blob/master/pkg/mgrconfig/config.go</a></li></ul></li><li>syzkaller coverage：<a href="https://github.com/google/syzkaller/blob/master/docs/coverage.md">syzkaller/docs/coverage.md at master · google/syzkaller</a></li><li>syzkaller Syscall descriptions：<a href="https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions.md">https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions.md</a></li><li>测试x86系统调用bug <a href="https://blog.csdn.net/m0_46161993/article/details/113869350">https://blog.csdn.net/m0_46161993/article/details/113869350</a></li></ul><h1 id="附录"><a class="markdownIt-Anchor" href="#附录"></a> 附录</h1><ol><li><h2 id="kernel相关编译参数"><a class="markdownIt-Anchor" href="#kernel相关编译参数"></a> kernel相关编译参数</h2></li></ol><p><a href="https://github.com/google/syzkaller/blob/master/docs/linux/kernel_configs.md">syzkaller/docs/linux/kernel_configs.md at master · google/syzkaller</a></p><p><strong>Coverage</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_KCOV=y</span><br><span class="line"></span><br><span class="line">CONFIG_KCOV_INSTRUMENT_ALL=y </span><br><span class="line">CONFIG_KCOV_ENABLE_COMPARISONS=y</span><br><span class="line">CONFIG_DEBUG_FS=y</span><br><span class="line"></span><br><span class="line">CONFIG_DEBUG_INFO=y</span><br></pre></td></tr></table></figure><p><strong>MemLeak</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_DEBUG_KMEMLEAK=y</span><br></pre></td></tr></table></figure><p><strong>Sandbox</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_NAMESPACES=y</span><br><span class="line">CONFIG_UTS_NS=y</span><br><span class="line">CONFIG_IPC_NS=y</span><br><span class="line">CONFIG_PID_NS=y</span><br><span class="line">CONFIG_NET_NS=y</span><br><span class="line">CONFIG_CGROUP_PIDS=y</span><br><span class="line">CONFIG_MEMCG=y</span><br><span class="line">CONFIG_USER_NS=y</span><br></pre></td></tr></table></figure><p><strong>KASAN</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_KASAN=y</span><br><span class="line">CONFIG_KASAN_INLINE=y</span><br></pre></td></tr></table></figure><p><strong>Fault Injection</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_FAULT_INJECTION=y</span><br><span class="line">CONFIG_FAULT_INJECTION_DEBUG_FS=y</span><br><span class="line">CONFIG_FAULT_INJECTION_USERCOPY=y</span><br><span class="line">CONFIG_FAILSLAB=y</span><br><span class="line">CONFIG_FAIL_PAGE_ALLOC=y</span><br><span class="line">CONFIG_FAIL_MAKE_REQUEST=y</span><br><span class="line">CONFIG_FAIL_IO_TIMEOUT=y</span><br><span class="line">CONFIG_FAIL_FUTEX=y</span><br></pre></td></tr></table></figure><p><strong>Timeout</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_DEFAULT_HUNG_TASK_TIMEOUT=140</span><br><span class="line">CONFIG_RCU_CPU_STALL_TIMEOUT=100</span><br></pre></td></tr></table></figure><p><strong>Others</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONFIG_LOCKDEP=y</span><br><span class="line">CONFIG_PROVE_LOCKING=y</span><br><span class="line">CONFIG_DEBUG_ATOMIC_SLEEP=y</span><br><span class="line">CONFIG_PROVE_RCU=y</span><br><span class="line">CONFIG_DEBUG_VM=y</span><br><span class="line">CONFIG_REFCOUNT_FULL=y</span><br><span class="line">CONFIG_FORTIFY_SOURCE=y</span><br><span class="line">CONFIG_HARDENED_USERCOPY=y</span><br><span class="line">CONFIG_LOCKUP_DETECTOR=y</span><br><span class="line">CONFIG_SOFTLOCKUP_DETECTOR=y</span><br><span class="line">CONFIG_HARDLOCKUP_DETECTOR=y</span><br><span class="line">CONFIG_BOOTPARAM_HARDLOCKUP_PANIC=y</span><br><span class="line">CONFIG_DETECT_HUNG_TASK=y</span><br><span class="line">CONFIG_WQ_WATCHDOG=y</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fuzz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/08/hello-world/"/>
      <url>/2024/12/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
